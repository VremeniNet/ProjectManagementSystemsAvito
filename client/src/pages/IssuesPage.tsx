// src/pages/IssuesPage.tsx

import { useMemo, useState, useEffect } from 'react'
import TaskFilters from '../components/TaskFilters'
import CreateTaskButton from '../components/CreateTaskButton'
import TaskModal from '../components/TaskModal'

import { TaskFormValues, TaskFormValuesWithID } from '../types/taskForm'
import { Task } from '../types/task'
import { User } from '../types/user'
import { Board } from '../types/board'

import { getTasks, createTask, updateTask } from '../api/tasks'
import { getUsers } from '../api/users'
import { getBoards } from '../api/boards'

const IssuesPage = () => {
	// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
	const [users, setUsers] = useState<User[]>([])
	const [boards, setBoards] = useState<Board[]>([])
	const [tasks, setTasks] = useState<Task[]>([])
	const [loading, setLoading] = useState(true)

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
	const [filters, setFilters] = useState({
		search: '',
		status: '',
		board: '',
		assignee: '',
	})

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ (—Å ID) –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
	const [selectedTask, setSelectedTask] = useState<TaskFormValuesWithID | null>(
		null
	)
	const [isModalOpen, setIsModalOpen] = useState(false)

	// –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
	useEffect(() => {
		const fetchData = async () => {
			try {
				const tasksData = await getTasks()
				const usersData = await getUsers()
				const boardsData = await getBoards()

				setTasks(tasksData)
				setUsers(usersData)
				setBoards(boardsData)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error)
			} finally {
				setLoading(false)
			}
		}
		fetchData()
	}, [])

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –ø–æ–∏—Å–∫—É, —Å—Ç–∞—Ç—É—Å—É, –¥–æ—Å–∫–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
	const filteredTasks = useMemo(() => {
		return tasks.filter(task => {
			const matchesSearch = task.title
				.toLowerCase()
				.includes(filters.search.toLowerCase())
			const matchesStatus = filters.status
				? task.status === filters.status
				: true
			const matchesBoard = task.boardName
				.toLowerCase()
				.includes(filters.board.toLowerCase())
			const matchesAssignee = task.assignee.fullName
				.toLowerCase()
				.includes(filters.assignee.toLowerCase())

			return matchesSearch && matchesStatus && matchesBoard && matchesAssignee
		})
	}, [filters, tasks])

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
	const handleChange = (field: string, value: string) => {
		setFilters(prev => ({ ...prev, [field]: value }))
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (—á–µ—Ä–µ–∑ API)
	const handleCreate = async (data: TaskFormValues) => {
		try {
			const newTask = await createTask(data)
			console.log('–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞:', newTask)
			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç
			setTasks(prev => [...prev, newTask])
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error)
		}
	}

	// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
	const handleOpen = (task: Task) => {
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Task ‚Üí TaskFormValuesWithID
		const taskForm: TaskFormValuesWithID = {
			id: task.id,
			title: task.title,
			description: task.description,
			status: task.status,
			priority: task.priority,
			assigneeId: task.assignee.id,
			boardId: task.boardId,
		}
		setSelectedTask(taskForm)
		setIsModalOpen(true)
	}

	const handleClose = () => {
		setSelectedTask(null)
		setIsModalOpen(false)
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—á–µ—Ä–µ–∑ API)
	const handleUpdate = async (updatedTask: TaskFormValues) => {
		try {
			if (selectedTask?.id) {
				const updated = await updateTask(selectedTask.id, updatedTask)
				console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:', updated)
				// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
				setTasks(prev =>
					prev.map(task =>
						task.id === selectedTask.id ? { ...task, ...updated } : task
					)
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error)
		}
		handleClose()
	}

	if (loading) {
		return (
			<div
				style={{
					backgroundColor: '#0A0A1E',
					height: 'calc(100vh - 12vh - 70px)',
					color: '#fff',
					display: 'flex',
					alignItems: 'center',
					justifyContent: 'center',
				}}
			>
				Loading tasks...
			</div>
		)
	}

	return (
		<div
			style={{
				borderBottom: '1px solid #22202E',
				backgroundColor: '#0A0A1E',
				height: 'calc(100vh - 12vh - 70px)',
				display: 'flex',
				flexDirection: 'column',
			}}
		>
			{/* –§–∏–ª—å—Ç—Ä—ã */}
			<TaskFilters
				search={filters.search}
				status={filters.status}
				board={filters.board}
				assignee={filters.assignee}
				onChange={handleChange}
			/>

			{/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
			<div
				style={{
					flex: 1,
					overflowY: 'auto',
					padding: '0 30px 60px',
					display: 'flex',
					flexDirection: 'column',
					gap: '16px',
				}}
			>
				{filteredTasks.map(task => (
					<div
						key={task.id}
						onClick={() => handleOpen(task)}
						style={{
							padding: '16px',
							backgroundColor: '#2c2c3e',
							borderRadius: '8px',
							color: 'white',
							cursor: 'pointer',
							border: '1px solid transparent',
							transition: 'border-color 0.2s',
						}}
						onMouseEnter={e => (e.currentTarget.style.borderColor = '#ffeb3b')}
						onMouseLeave={e =>
							(e.currentTarget.style.borderColor = 'transparent')
						}
					>
						<h3>{task.title}</h3>
						<p style={{ opacity: 0.7 }}>{task.description}</p>
						<p>
							üìå {task.status} | ‚ö° {task.priority} | üë§{' '}
							{task.assignee.fullName} | üìã {task.boardName}
						</p>
					</div>
				))}
			</div>

			{/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
			<div
				style={{
					display: 'flex',
					justifyContent: 'flex-end',
					marginTop: '15px',
					marginBottom: '26px',
					marginRight: '30px',
				}}
			>
				<CreateTaskButton onClick={() => setIsModalOpen(true)} />
				{isModalOpen && (
					<TaskModal
						open={isModalOpen}
						onClose={handleClose}
						onSubmit={selectedTask ? handleUpdate : handleCreate}
						initialValues={selectedTask ?? undefined}
						isFromBoard={false}
						showGoToBoard={!!selectedTask}
						users={users}
						boards={boards}
					/>
				)}
			</div>
		</div>
	)
}

export default IssuesPage
